// Code generated by MockGen. DO NOT EDIT.
// Source: internal/http/server/user/abstract.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	core "crafa/internal/core"
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionManager is a mock of SessionManager interface.
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager.
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance.
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// GetSession mocks base method.
func (m *MockSessionManager) GetSession(r *http.Request) (*core.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", r)
	ret0, _ := ret[0].(*core.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockSessionManagerMockRecorder) GetSession(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessionManager)(nil).GetSession), r)
}

// MockUserStorager is a mock of UserStorager interface.
type MockUserStorager struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoragerMockRecorder
}

// MockUserStoragerMockRecorder is the mock recorder for MockUserStorager.
type MockUserStoragerMockRecorder struct {
	mock *MockUserStorager
}

// NewMockUserStorager creates a new mock instance.
func NewMockUserStorager(ctrl *gomock.Controller) *MockUserStorager {
	mock := &MockUserStorager{ctrl: ctrl}
	mock.recorder = &MockUserStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorager) EXPECT() *MockUserStoragerMockRecorder {
	return m.recorder
}

// AdvAuthUser mocks base method.
func (m *MockUserStorager) AdvAuthUser(arg0 context.Context, arg1 *core.User, arg2 string, arg3 time.Duration) (*core.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvAuthUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*core.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdvAuthUser indicates an expected call of AdvAuthUser.
func (mr *MockUserStoragerMockRecorder) AdvAuthUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvAuthUser", reflect.TypeOf((*MockUserStorager)(nil).AdvAuthUser), arg0, arg1, arg2, arg3)
}

// BaseAuthUser mocks base method.
func (m *MockUserStorager) BaseAuthUser(arg0 context.Context, arg1 *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseAuthUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BaseAuthUser indicates an expected call of BaseAuthUser.
func (mr *MockUserStoragerMockRecorder) BaseAuthUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseAuthUser", reflect.TypeOf((*MockUserStorager)(nil).BaseAuthUser), arg0, arg1)
}

// ConfirmUserEmail mocks base method.
func (m *MockUserStorager) ConfirmUserEmail(ctx context.Context, userID int, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmUserEmail", ctx, userID, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmUserEmail indicates an expected call of ConfirmUserEmail.
func (mr *MockUserStoragerMockRecorder) ConfirmUserEmail(ctx, userID, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmUserEmail", reflect.TypeOf((*MockUserStorager)(nil).ConfirmUserEmail), ctx, userID, otp)
}

// RegUser mocks base method.
func (m *MockUserStorager) RegUser(ctx context.Context, u *core.User, domain string) (*core.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegUser", ctx, u, domain)
	ret0, _ := ret[0].(*core.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegUser indicates an expected call of RegUser.
func (mr *MockUserStoragerMockRecorder) RegUser(ctx, u, domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegUser", reflect.TypeOf((*MockUserStorager)(nil).RegUser), ctx, u, domain)
}

// SelectAllUsers mocks base method.
func (m *MockUserStorager) SelectAllUsers(ctx context.Context) ([]core.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllUsers", ctx)
	ret0, _ := ret[0].([]core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllUsers indicates an expected call of SelectAllUsers.
func (mr *MockUserStoragerMockRecorder) SelectAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllUsers", reflect.TypeOf((*MockUserStorager)(nil).SelectAllUsers), ctx)
}

// SelectUser mocks base method.
func (m *MockUserStorager) SelectUser(ctx context.Context, u *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUser", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectUser indicates an expected call of SelectUser.
func (mr *MockUserStoragerMockRecorder) SelectUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUser", reflect.TypeOf((*MockUserStorager)(nil).SelectUser), ctx, u)
}

// UpdateUser mocks base method.
func (m *MockUserStorager) UpdateUser(arg0 context.Context, arg1 *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserStoragerMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserStorager)(nil).UpdateUser), arg0, arg1)
}

// MockCookieManager is a mock of CookieManager interface.
type MockCookieManager struct {
	ctrl     *gomock.Controller
	recorder *MockCookieManagerMockRecorder
}

// MockCookieManagerMockRecorder is the mock recorder for MockCookieManager.
type MockCookieManagerMockRecorder struct {
	mock *MockCookieManager
}

// NewMockCookieManager creates a new mock instance.
func NewMockCookieManager(ctrl *gomock.Controller) *MockCookieManager {
	mock := &MockCookieManager{ctrl: ctrl}
	mock.recorder = &MockCookieManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCookieManager) EXPECT() *MockCookieManagerMockRecorder {
	return m.recorder
}

// NewCookieWithSession mocks base method.
func (m *MockCookieManager) NewCookieWithSession(s *core.Session) (*http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCookieWithSession", s)
	ret0, _ := ret[0].(*http.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCookieWithSession indicates an expected call of NewCookieWithSession.
func (mr *MockCookieManagerMockRecorder) NewCookieWithSession(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCookieWithSession", reflect.TypeOf((*MockCookieManager)(nil).NewCookieWithSession), s)
}

// MockRoleStorager is a mock of RoleStorager interface.
type MockRoleStorager struct {
	ctrl     *gomock.Controller
	recorder *MockRoleStoragerMockRecorder
}

// MockRoleStoragerMockRecorder is the mock recorder for MockRoleStorager.
type MockRoleStoragerMockRecorder struct {
	mock *MockRoleStorager
}

// NewMockRoleStorager creates a new mock instance.
func NewMockRoleStorager(ctrl *gomock.Controller) *MockRoleStorager {
	mock := &MockRoleStorager{ctrl: ctrl}
	mock.recorder = &MockRoleStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleStorager) EXPECT() *MockRoleStoragerMockRecorder {
	return m.recorder
}

// SelectPossibleRoles mocks base method.
func (m *MockRoleStorager) SelectPossibleRoles(arg0 context.Context) ([]core.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPossibleRoles", arg0)
	ret0, _ := ret[0].([]core.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPossibleRoles indicates an expected call of SelectPossibleRoles.
func (mr *MockRoleStoragerMockRecorder) SelectPossibleRoles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPossibleRoles", reflect.TypeOf((*MockRoleStorager)(nil).SelectPossibleRoles), arg0)
}

// SelectRole mocks base method.
func (m *MockRoleStorager) SelectRole(arg0 context.Context, arg1 *core.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectRole indicates an expected call of SelectRole.
func (mr *MockRoleStoragerMockRecorder) SelectRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRole", reflect.TypeOf((*MockRoleStorager)(nil).SelectRole), arg0, arg1)
}

// MockProjectStorager is a mock of ProjectStorager interface.
type MockProjectStorager struct {
	ctrl     *gomock.Controller
	recorder *MockProjectStoragerMockRecorder
}

// MockProjectStoragerMockRecorder is the mock recorder for MockProjectStorager.
type MockProjectStoragerMockRecorder struct {
	mock *MockProjectStorager
}

// NewMockProjectStorager creates a new mock instance.
func NewMockProjectStorager(ctrl *gomock.Controller) *MockProjectStorager {
	mock := &MockProjectStorager{ctrl: ctrl}
	mock.recorder = &MockProjectStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectStorager) EXPECT() *MockProjectStoragerMockRecorder {
	return m.recorder
}

// DeleteProject mocks base method.
func (m *MockProjectStorager) DeleteProject(arg0 context.Context, arg1 *core.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectStoragerMockRecorder) DeleteProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectStorager)(nil).DeleteProject), arg0, arg1)
}

// DeleteUserProject mocks base method.
func (m *MockProjectStorager) DeleteUserProject(arg0 context.Context, arg1 *core.User, arg2 *core.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserProject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserProject indicates an expected call of DeleteUserProject.
func (mr *MockProjectStoragerMockRecorder) DeleteUserProject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserProject", reflect.TypeOf((*MockProjectStorager)(nil).DeleteUserProject), arg0, arg1, arg2)
}

// InsertProject mocks base method.
func (m *MockProjectStorager) InsertProject(arg0 context.Context, arg1 *core.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProject indicates an expected call of InsertProject.
func (mr *MockProjectStoragerMockRecorder) InsertProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProject", reflect.TypeOf((*MockProjectStorager)(nil).InsertProject), arg0, arg1)
}

// InsertUserProject mocks base method.
func (m *MockProjectStorager) InsertUserProject(ctx context.Context, userID, projectID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserProject", ctx, userID, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserProject indicates an expected call of InsertUserProject.
func (mr *MockProjectStoragerMockRecorder) InsertUserProject(ctx, userID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserProject", reflect.TypeOf((*MockProjectStorager)(nil).InsertUserProject), ctx, userID, projectID)
}

// SelectAllProjectEpics mocks base method.
func (m *MockProjectStorager) SelectAllProjectEpics(arg0 context.Context, arg1 *core.Project) ([]core.Epic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllProjectEpics", arg0, arg1)
	ret0, _ := ret[0].([]core.Epic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllProjectEpics indicates an expected call of SelectAllProjectEpics.
func (mr *MockProjectStoragerMockRecorder) SelectAllProjectEpics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllProjectEpics", reflect.TypeOf((*MockProjectStorager)(nil).SelectAllProjectEpics), arg0, arg1)
}

// SelectAllProjects mocks base method.
func (m *MockProjectStorager) SelectAllProjects(arg0 context.Context) ([]core.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllProjects", arg0)
	ret0, _ := ret[0].([]core.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllProjects indicates an expected call of SelectAllProjects.
func (mr *MockProjectStoragerMockRecorder) SelectAllProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllProjects", reflect.TypeOf((*MockProjectStorager)(nil).SelectAllProjects), arg0)
}

// SelectPossibleNewUserProjects mocks base method.
func (m *MockProjectStorager) SelectPossibleNewUserProjects(arg0 context.Context, arg1 *core.User) ([]core.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPossibleNewUserProjects", arg0, arg1)
	ret0, _ := ret[0].([]core.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPossibleNewUserProjects indicates an expected call of SelectPossibleNewUserProjects.
func (mr *MockProjectStoragerMockRecorder) SelectPossibleNewUserProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPossibleNewUserProjects", reflect.TypeOf((*MockProjectStorager)(nil).SelectPossibleNewUserProjects), arg0, arg1)
}

// SelectProject mocks base method.
func (m *MockProjectStorager) SelectProject(arg0 context.Context, arg1 *core.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectProject indicates an expected call of SelectProject.
func (mr *MockProjectStoragerMockRecorder) SelectProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectProject", reflect.TypeOf((*MockProjectStorager)(nil).SelectProject), arg0, arg1)
}

// SelectUserProjects mocks base method.
func (m *MockProjectStorager) SelectUserProjects(arg0 context.Context, arg1 *core.User) ([]core.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserProjects", arg0, arg1)
	ret0, _ := ret[0].([]core.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserProjects indicates an expected call of SelectUserProjects.
func (mr *MockProjectStoragerMockRecorder) SelectUserProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserProjects", reflect.TypeOf((*MockProjectStorager)(nil).SelectUserProjects), arg0, arg1)
}

// UpdateProject mocks base method.
func (m *MockProjectStorager) UpdateProject(arg0 context.Context, arg1 *core.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectStoragerMockRecorder) UpdateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectStorager)(nil).UpdateProject), arg0, arg1)
}

// MockTeamStorager is a mock of TeamStorager interface.
type MockTeamStorager struct {
	ctrl     *gomock.Controller
	recorder *MockTeamStoragerMockRecorder
}

// MockTeamStoragerMockRecorder is the mock recorder for MockTeamStorager.
type MockTeamStoragerMockRecorder struct {
	mock *MockTeamStorager
}

// NewMockTeamStorager creates a new mock instance.
func NewMockTeamStorager(ctrl *gomock.Controller) *MockTeamStorager {
	mock := &MockTeamStorager{ctrl: ctrl}
	mock.recorder = &MockTeamStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamStorager) EXPECT() *MockTeamStoragerMockRecorder {
	return m.recorder
}

// DeleteTeam mocks base method.
func (m *MockTeamStorager) DeleteTeam(ctx context.Context, p *core.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockTeamStoragerMockRecorder) DeleteTeam(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockTeamStorager)(nil).DeleteTeam), ctx, p)
}

// DeleteUserTeam mocks base method.
func (m *MockTeamStorager) DeleteUserTeam(ctx context.Context, u *core.User, p *core.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserTeam", ctx, u, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserTeam indicates an expected call of DeleteUserTeam.
func (mr *MockTeamStoragerMockRecorder) DeleteUserTeam(ctx, u, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserTeam", reflect.TypeOf((*MockTeamStorager)(nil).DeleteUserTeam), ctx, u, p)
}

// InsertTeam mocks base method.
func (m *MockTeamStorager) InsertTeam(ctx context.Context, p *core.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTeam", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTeam indicates an expected call of InsertTeam.
func (mr *MockTeamStoragerMockRecorder) InsertTeam(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTeam", reflect.TypeOf((*MockTeamStorager)(nil).InsertTeam), ctx, p)
}

// InsertUserTeams mocks base method.
func (m *MockTeamStorager) InsertUserTeams(ctx context.Context, userID, TeamID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserTeams", ctx, userID, TeamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserTeams indicates an expected call of InsertUserTeams.
func (mr *MockTeamStoragerMockRecorder) InsertUserTeams(ctx, userID, TeamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserTeams", reflect.TypeOf((*MockTeamStorager)(nil).InsertUserTeams), ctx, userID, TeamID)
}

// SelectAllTeamEpics mocks base method.
func (m *MockTeamStorager) SelectAllTeamEpics(ctx context.Context, c *core.Team) ([]core.Epic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllTeamEpics", ctx, c)
	ret0, _ := ret[0].([]core.Epic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllTeamEpics indicates an expected call of SelectAllTeamEpics.
func (mr *MockTeamStoragerMockRecorder) SelectAllTeamEpics(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllTeamEpics", reflect.TypeOf((*MockTeamStorager)(nil).SelectAllTeamEpics), ctx, c)
}

// SelectAllTeams mocks base method.
func (m *MockTeamStorager) SelectAllTeams(ctx context.Context) ([]core.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllTeams", ctx)
	ret0, _ := ret[0].([]core.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllTeams indicates an expected call of SelectAllTeams.
func (mr *MockTeamStoragerMockRecorder) SelectAllTeams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllTeams", reflect.TypeOf((*MockTeamStorager)(nil).SelectAllTeams), ctx)
}

// SelectPossibleNewUserTeams mocks base method.
func (m *MockTeamStorager) SelectPossibleNewUserTeams(ctx context.Context, u *core.User) ([]core.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPossibleNewUserTeams", ctx, u)
	ret0, _ := ret[0].([]core.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPossibleNewUserTeams indicates an expected call of SelectPossibleNewUserTeams.
func (mr *MockTeamStoragerMockRecorder) SelectPossibleNewUserTeams(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPossibleNewUserTeams", reflect.TypeOf((*MockTeamStorager)(nil).SelectPossibleNewUserTeams), ctx, u)
}

// SelectTeam mocks base method.
func (m *MockTeamStorager) SelectTeam(ctx context.Context, p *core.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTeam", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectTeam indicates an expected call of SelectTeam.
func (mr *MockTeamStoragerMockRecorder) SelectTeam(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTeam", reflect.TypeOf((*MockTeamStorager)(nil).SelectTeam), ctx, p)
}

// SelectUserTeams mocks base method.
func (m *MockTeamStorager) SelectUserTeams(ctx context.Context, u *core.User) ([]core.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserTeams", ctx, u)
	ret0, _ := ret[0].([]core.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserTeams indicates an expected call of SelectUserTeams.
func (mr *MockTeamStoragerMockRecorder) SelectUserTeams(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserTeams", reflect.TypeOf((*MockTeamStorager)(nil).SelectUserTeams), ctx, u)
}

// UpdateTeam mocks base method.
func (m *MockTeamStorager) UpdateTeam(ctx context.Context, p *core.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeam indicates an expected call of UpdateTeam.
func (mr *MockTeamStoragerMockRecorder) UpdateTeam(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockTeamStorager)(nil).UpdateTeam), ctx, p)
}
