// Code generated by MockGen. DO NOT EDIT.
// Source: internal/http/server/category/abstract.go

// Package mock_category is a generated GoMock package.
package mock_category

import (
	context "context"
	core "money/internal/core"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionManager is a mock of SessionManager interface.
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager.
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance.
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// GetSession mocks base method.
func (m *MockSessionManager) GetSession(r *http.Request) (*core.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", r)
	ret0, _ := ret[0].(*core.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockSessionManagerMockRecorder) GetSession(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessionManager)(nil).GetSession), r)
}

// MockLevelStorager is a mock of LevelStorager interface.
type MockLevelStorager struct {
	ctrl     *gomock.Controller
	recorder *MockLevelStoragerMockRecorder
}

// MockLevelStoragerMockRecorder is the mock recorder for MockLevelStorager.
type MockLevelStoragerMockRecorder struct {
	mock *MockLevelStorager
}

// NewMockLevelStorager creates a new mock instance.
func NewMockLevelStorager(ctrl *gomock.Controller) *MockLevelStorager {
	mock := &MockLevelStorager{ctrl: ctrl}
	mock.recorder = &MockLevelStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLevelStorager) EXPECT() *MockLevelStoragerMockRecorder {
	return m.recorder
}

// SelectAllLevels mocks base method.
func (m *MockLevelStorager) SelectAllLevels(arg0 context.Context) ([]core.Level, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllLevels", arg0)
	ret0, _ := ret[0].([]core.Level)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllLevels indicates an expected call of SelectAllLevels.
func (mr *MockLevelStoragerMockRecorder) SelectAllLevels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllLevels", reflect.TypeOf((*MockLevelStorager)(nil).SelectAllLevels), arg0)
}

// SelectLevel mocks base method.
func (m *MockLevelStorager) SelectLevel(arg0 context.Context, arg1 *core.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectLevel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectLevel indicates an expected call of SelectLevel.
func (mr *MockLevelStoragerMockRecorder) SelectLevel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectLevel", reflect.TypeOf((*MockLevelStorager)(nil).SelectLevel), arg0, arg1)
}

// MockCategoryStorager is a mock of CategoryStorager interface.
type MockCategoryStorager struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryStoragerMockRecorder
}

// MockCategoryStoragerMockRecorder is the mock recorder for MockCategoryStorager.
type MockCategoryStoragerMockRecorder struct {
	mock *MockCategoryStorager
}

// NewMockCategoryStorager creates a new mock instance.
func NewMockCategoryStorager(ctrl *gomock.Controller) *MockCategoryStorager {
	mock := &MockCategoryStorager{ctrl: ctrl}
	mock.recorder = &MockCategoryStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryStorager) EXPECT() *MockCategoryStoragerMockRecorder {
	return m.recorder
}

// DeleteCategory mocks base method.
func (m *MockCategoryStorager) DeleteCategory(ctx context.Context, c *core.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockCategoryStoragerMockRecorder) DeleteCategory(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockCategoryStorager)(nil).DeleteCategory), ctx, c)
}

// InsertCategory mocks base method.
func (m *MockCategoryStorager) InsertCategory(ctx context.Context, c *core.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCategory", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCategory indicates an expected call of InsertCategory.
func (mr *MockCategoryStoragerMockRecorder) InsertCategory(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCategory", reflect.TypeOf((*MockCategoryStorager)(nil).InsertCategory), ctx, c)
}

// SelectAllCategories mocks base method.
func (m *MockCategoryStorager) SelectAllCategories(ctx context.Context) ([]core.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllCategories", ctx)
	ret0, _ := ret[0].([]core.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllCategories indicates an expected call of SelectAllCategories.
func (mr *MockCategoryStoragerMockRecorder) SelectAllCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllCategories", reflect.TypeOf((*MockCategoryStorager)(nil).SelectAllCategories), ctx)
}

// SelectAllLevelCategories mocks base method.
func (m *MockCategoryStorager) SelectAllLevelCategories(ctx context.Context, l *core.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllLevelCategories", ctx, l)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectAllLevelCategories indicates an expected call of SelectAllLevelCategories.
func (mr *MockCategoryStoragerMockRecorder) SelectAllLevelCategories(ctx, l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllLevelCategories", reflect.TypeOf((*MockCategoryStorager)(nil).SelectAllLevelCategories), ctx, l)
}

// SelectCategory mocks base method.
func (m *MockCategoryStorager) SelectCategory(ctx context.Context, c *core.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCategory", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectCategory indicates an expected call of SelectCategory.
func (mr *MockCategoryStoragerMockRecorder) SelectCategory(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCategory", reflect.TypeOf((*MockCategoryStorager)(nil).SelectCategory), ctx, c)
}

// UpdateCategory mocks base method.
func (m *MockCategoryStorager) UpdateCategory(ctx context.Context, c *core.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockCategoryStoragerMockRecorder) UpdateCategory(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockCategoryStorager)(nil).UpdateCategory), ctx, c)
}
