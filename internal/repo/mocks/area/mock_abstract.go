// Code generated by MockGen. DO NOT EDIT.
// Source: internal/http/server/area/abstract.go

// Package mock_area is a generated GoMock package.
package mock_area

import (
	context "context"
	core "money/internal/core"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionManager is a mock of SessionManager interface.
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager.
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance.
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// GetSession mocks base method.
func (m *MockSessionManager) GetSession(r *http.Request) (*core.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", r)
	ret0, _ := ret[0].(*core.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockSessionManagerMockRecorder) GetSession(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessionManager)(nil).GetSession), r)
}

// MockAreaStorager is a mock of AreaStorager interface.
type MockAreaStorager struct {
	ctrl     *gomock.Controller
	recorder *MockAreaStoragerMockRecorder
}

// MockAreaStoragerMockRecorder is the mock recorder for MockAreaStorager.
type MockAreaStoragerMockRecorder struct {
	mock *MockAreaStorager
}

// NewMockAreaStorager creates a new mock instance.
func NewMockAreaStorager(ctrl *gomock.Controller) *MockAreaStorager {
	mock := &MockAreaStorager{ctrl: ctrl}
	mock.recorder = &MockAreaStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAreaStorager) EXPECT() *MockAreaStoragerMockRecorder {
	return m.recorder
}

// DeleteArea mocks base method.
func (m *MockAreaStorager) DeleteArea(arg0 context.Context, arg1 *core.Area) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArea", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArea indicates an expected call of DeleteArea.
func (mr *MockAreaStoragerMockRecorder) DeleteArea(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArea", reflect.TypeOf((*MockAreaStorager)(nil).DeleteArea), arg0, arg1)
}

// InsertArea mocks base method.
func (m *MockAreaStorager) InsertArea(arg0 context.Context, arg1 *core.Area) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertArea", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertArea indicates an expected call of InsertArea.
func (mr *MockAreaStoragerMockRecorder) InsertArea(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertArea", reflect.TypeOf((*MockAreaStorager)(nil).InsertArea), arg0, arg1)
}

// SelectAllAreas mocks base method.
func (m *MockAreaStorager) SelectAllAreas(arg0 context.Context) ([]core.Area, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllAreas", arg0)
	ret0, _ := ret[0].([]core.Area)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllAreas indicates an expected call of SelectAllAreas.
func (mr *MockAreaStoragerMockRecorder) SelectAllAreas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllAreas", reflect.TypeOf((*MockAreaStorager)(nil).SelectAllAreas), arg0)
}

// SelectAllLevelAreas mocks base method.
func (m *MockAreaStorager) SelectAllLevelAreas(arg0 context.Context, arg1 *core.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllLevelAreas", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectAllLevelAreas indicates an expected call of SelectAllLevelAreas.
func (mr *MockAreaStoragerMockRecorder) SelectAllLevelAreas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllLevelAreas", reflect.TypeOf((*MockAreaStorager)(nil).SelectAllLevelAreas), arg0, arg1)
}

// SelectArea mocks base method.
func (m *MockAreaStorager) SelectArea(arg0 context.Context, arg1 *core.Area) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectArea", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectArea indicates an expected call of SelectArea.
func (mr *MockAreaStoragerMockRecorder) SelectArea(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectArea", reflect.TypeOf((*MockAreaStorager)(nil).SelectArea), arg0, arg1)
}

// UpdateArea mocks base method.
func (m *MockAreaStorager) UpdateArea(arg0 context.Context, arg1 *core.Area) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArea", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArea indicates an expected call of UpdateArea.
func (mr *MockAreaStoragerMockRecorder) UpdateArea(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArea", reflect.TypeOf((*MockAreaStorager)(nil).UpdateArea), arg0, arg1)
}

// MockLevelStorager is a mock of LevelStorager interface.
type MockLevelStorager struct {
	ctrl     *gomock.Controller
	recorder *MockLevelStoragerMockRecorder
}

// MockLevelStoragerMockRecorder is the mock recorder for MockLevelStorager.
type MockLevelStoragerMockRecorder struct {
	mock *MockLevelStorager
}

// NewMockLevelStorager creates a new mock instance.
func NewMockLevelStorager(ctrl *gomock.Controller) *MockLevelStorager {
	mock := &MockLevelStorager{ctrl: ctrl}
	mock.recorder = &MockLevelStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLevelStorager) EXPECT() *MockLevelStoragerMockRecorder {
	return m.recorder
}

// SelectAllLevels mocks base method.
func (m *MockLevelStorager) SelectAllLevels(arg0 context.Context) ([]core.Level, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllLevels", arg0)
	ret0, _ := ret[0].([]core.Level)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllLevels indicates an expected call of SelectAllLevels.
func (mr *MockLevelStoragerMockRecorder) SelectAllLevels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllLevels", reflect.TypeOf((*MockLevelStorager)(nil).SelectAllLevels), arg0)
}

// SelectLevel mocks base method.
func (m *MockLevelStorager) SelectLevel(arg0 context.Context, arg1 *core.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectLevel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectLevel indicates an expected call of SelectLevel.
func (mr *MockLevelStoragerMockRecorder) SelectLevel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectLevel", reflect.TypeOf((*MockLevelStorager)(nil).SelectLevel), arg0, arg1)
}
